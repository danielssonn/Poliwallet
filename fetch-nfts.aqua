import "@fluencelabs/aqua-lib/builtin.aqua"

const NFT_MARKETPLACE_NODE_PEER_ID ?= "12D3KooWFEwNWcHqi9rtsmDhsYcDbRUCDXH84RC4FW6UfsFWaoHi"
const NFT_MARKETPLACE_SERVICE_ID ?= "7f792f0b-8e9b-4b6d-90f7-bd6461e84d1d"

data NFTEcho:
  msg: string
  reply: string

service MarketplaceService:
  hello(from: string) -> NFTEcho
  opensea_fetch() -> NFTEcho
  opensea_fetch_len() -> NFTEcho
  rarible_fetch() -> NFTEcho
  rarible_fetch_len() -> NFTEcho


-- The service runs inside browser
service ClientPeer("ClientPeer"):
    hello(message: string) -> string

func sayHello(targetPeerId: PeerId, targetRelayPeerId: PeerId) -> string:
    -- execute computation on a Peer in the network
    on NFT_MARKETPLACE_NODE_PEER_ID:
        MarketplaceService NFT_MARKETPLACE_SERVICE_ID
        comp <- MarketplaceService.hello("With love")

    -- send the result to target browser in the background
    on targetPeerId via targetRelayPeerId:
        co ClientPeer.hello(%init_peer_id%)

    -- send the result to the initiator
    <- comp.reply


func fetchOpenSea(targetPeerId: PeerId, targetRelayPeerId: PeerId) -> string:
    -- execute computation on a Peer in the network
    on NFT_MARKETPLACE_NODE_PEER_ID:
        MarketplaceService NFT_MARKETPLACE_SERVICE_ID
        comp <- MarketplaceService.opensea_fetch()

    -- send the result to target browser in the background
    on targetPeerId via targetRelayPeerId:
        co ClientPeer.hello(%init_peer_id%)

    -- send the result to the initiator
    <- comp.reply    


func fetchOpenSeaSize(targetPeerId: PeerId, targetRelayPeerId: PeerId) -> string:
    -- execute computation on a Peer in the network
    on NFT_MARKETPLACE_NODE_PEER_ID:
        MarketplaceService NFT_MARKETPLACE_SERVICE_ID
        comp <- MarketplaceService.opensea_fetch_len()

    -- send the result to target browser in the background
    on targetPeerId via targetRelayPeerId:
        co ClientPeer.hello(%init_peer_id%)

    -- send the result to the initiator
    <- comp.reply 

func fetchRarible(targetPeerId: PeerId, targetRelayPeerId: PeerId) -> string:
    -- execute computation on a Peer in the network
    on NFT_MARKETPLACE_NODE_PEER_ID:
        MarketplaceService NFT_MARKETPLACE_SERVICE_ID
        comp <- MarketplaceService.rarible_fetch()

    -- send the result to target browser in the background
    on targetPeerId via targetRelayPeerId:
        co ClientPeer.hello(%init_peer_id%)

    -- send the result to the initiator
    <- comp.reply    


func fetchRaribleSize(targetPeerId: PeerId, targetRelayPeerId: PeerId) -> string:
    -- execute computation on a Peer in the network
    on NFT_MARKETPLACE_NODE_PEER_ID:
        MarketplaceService NFT_MARKETPLACE_SERVICE_ID
        comp <- MarketplaceService.rarible_fetch_len()

    -- send the result to target browser in the background
    on targetPeerId via targetRelayPeerId:
        co ClientPeer.hello(%init_peer_id%)

    -- send the result to the initiator
    <- comp.reply        


