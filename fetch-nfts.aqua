import "@fluencelabs/aqua-lib/builtin.aqua"

const HELLO_WORLD_NODE_PEER_ID ?= "12D3KooWFEwNWcHqi9rtsmDhsYcDbRUCDXH84RC4FW6UfsFWaoHi"
const HELLO_WORLD_SERVICE_ID ?= "b6c9d9b4-e2b9-4c22-8a1f-dd25b25797d0"

data NFTEcho:
  msg: string
  reply: string

service MarketplaceService:
  hello(from: string) -> NFTEcho
  opensea_fetch() -> NFTEcho
  opensea_fetch_len() -> NFTEcho
  rarible_fetch() -> NFTEcho
  rarible_fetch_len() -> NFTEcho


-- The service runs inside browser
service HelloPeer("HelloPeer"):
    hello(message: string) -> string

func sayHello(targetPeerId: PeerId, targetRelayPeerId: PeerId) -> string:
    -- execute computation on a Peer in the network
    on HELLO_WORLD_NODE_PEER_ID:
        MarketplaceService HELLO_WORLD_SERVICE_ID
        comp <- MarketplaceService.hello("With love")

    -- send the result to target browser in the background
    on targetPeerId via targetRelayPeerId:
        co HelloPeer.hello(%init_peer_id%)

    -- send the result to the initiator
    <- comp.reply


func fetchOpenSea(targetPeerId: PeerId, targetRelayPeerId: PeerId) -> string:
    -- execute computation on a Peer in the network
    on HELLO_WORLD_NODE_PEER_ID:
        MarketplaceService HELLO_WORLD_SERVICE_ID
        comp <- MarketplaceService.opensea_fetch()

    -- send the result to target browser in the background
    on targetPeerId via targetRelayPeerId:
        co HelloPeer.hello(%init_peer_id%)

    -- send the result to the initiator
    <- comp.reply    


func fetchOpenSeaSize(targetPeerId: PeerId, targetRelayPeerId: PeerId) -> string:
    -- execute computation on a Peer in the network
    on HELLO_WORLD_NODE_PEER_ID:
        MarketplaceService HELLO_WORLD_SERVICE_ID
        comp <- MarketplaceService.opensea_fetch_len()

    -- send the result to target browser in the background
    on targetPeerId via targetRelayPeerId:
        co HelloPeer.hello(%init_peer_id%)

    -- send the result to the initiator
    <- comp.reply 

func fetchRarible(targetPeerId: PeerId, targetRelayPeerId: PeerId) -> string:
    -- execute computation on a Peer in the network
    on HELLO_WORLD_NODE_PEER_ID:
        MarketplaceService HELLO_WORLD_SERVICE_ID
        comp <- MarketplaceService.rarible_fetch()

    -- send the result to target browser in the background
    on targetPeerId via targetRelayPeerId:
        co HelloPeer.hello(%init_peer_id%)

    -- send the result to the initiator
    <- comp.reply    


func fetchRaribleSize(targetPeerId: PeerId, targetRelayPeerId: PeerId) -> string:
    -- execute computation on a Peer in the network
    on HELLO_WORLD_NODE_PEER_ID:
        MarketplaceService HELLO_WORLD_SERVICE_ID
        comp <- MarketplaceService.rarible_fetch_len()

    -- send the result to target browser in the background
    on targetPeerId via targetRelayPeerId:
        co HelloPeer.hello(%init_peer_id%)

    -- send the result to the initiator
    <- comp.reply        
