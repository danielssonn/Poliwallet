/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.5.2-256
 *
 */
import { Fluence, FluencePeer } from '@fluencelabs/fluence';
import {
    CallParams,
    callFunction,
    registerService,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v2';


// Services

export interface NFTMarketPlaceDef {
    opensea_fetch: (callParams: CallParams<null>) => { msg: string; reply: string; } | Promise<{ msg: string; reply: string; }>;
}
export function registerNFTMarketPlace(serviceId: string, service: NFTMarketPlaceDef): void;
export function registerNFTMarketPlace(peer: FluencePeer, serviceId: string, service: NFTMarketPlaceDef): void;
       

export function registerNFTMarketPlace(...args: any) {
    registerService(
        args,
        {
    "functions" : [
        {
            "functionName" : "opensea_fetch",
            "argDefs" : [
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        }
    ]
}
    );
}
      


export interface ClientPeerDef {
    show: (message: string, callParams: CallParams<'message'>) => string | Promise<string>;
}
export function registerClientPeer(service: ClientPeerDef): void;
export function registerClientPeer(serviceId: string, service: ClientPeerDef): void;
export function registerClientPeer(peer: FluencePeer, service: ClientPeerDef): void;
export function registerClientPeer(peer: FluencePeer, serviceId: string, service: ClientPeerDef): void;
       

export function registerClientPeer(...args: any) {
    registerService(
        args,
        {
    "defaultServiceId" : "ClientPeer",
    "functions" : [
        {
            "functionName" : "show",
            "argDefs" : [
                {
                    "name" : "message",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        }
    ]
}
    );
}
      
// Functions
 

export function fetchNFTs(
    targetPeerId: string,
    targetRelayPeerId: string,
    config?: {ttl?: number}
): Promise<string>;

export function fetchNFTs(
    peer: FluencePeer,
    targetPeerId: string,
    targetRelayPeerId: string,
    config?: {ttl?: number}
): Promise<string>;

export function fetchNFTs(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                          (call %init_peer_id% ("getDataSrv" "targetPeerId") [] targetPeerId)
                         )
                         (call %init_peer_id% ("getDataSrv" "targetRelayPeerId") [] targetRelayPeerId)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (call "12D3KooWGxkRC917P9UwszKUDiWpmj7vuoqWJ1yzRAFFfGsofxHL" ("3cee2339-e8b3-4b26-b75c-14ee4d32976f" "opensea_fetch") [] comp)
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [comp.$.reply!])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "fetchNFTs",
    "returnType" : {
        "tag" : "primitive"
    },
    "argDefs" : [
        {
            "name" : "targetPeerId",
            "argType" : {
                "tag" : "primitive"
            }
        },
        {
            "name" : "targetRelayPeerId",
            "argType" : {
                "tag" : "primitive"
            }
        }
    ],
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}
